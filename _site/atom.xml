<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Garretthh07&#39;s Blog</title>
 <link href="http://garretthh07.github.io//atom.xml" rel="self"/>
 <link href="http://garretthh07.github.io/"/>
 <updated>2016-03-14T00:38:06+08:00</updated>
 <id>http://garretthh07.github.io/</id>
 <author>
   <name>ShunFa Zhang</name>
   <email>garretthh07@gmail.com</email>
 </author>

 
 <entry>
   <title>Android</title>
   <link href="http://garretthh07.github.io//life/2016/02/24/Android"/>
   <updated>2016-02-24T00:00:00+08:00</updated>
   <id>http://garretthh07.github.io//life/2016/02/24/Android</id>
   <content type="html">
&lt;hr /&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;2月18号&lt;/code&gt; Apple Pay 刚刚进入中国, 很多人吵的很凶，说这是银联要和支付宝，微信支付开战的节奏，然而我并不看好 Apple Pay:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;首先 &lt;code class=&quot;highlighter-rouge&quot;&gt;Apple Pay&lt;/code&gt; 只能适用于 iphone 6 以上的机型， 系统要求要 iOS 9.2 以上&lt;/li&gt;
  &lt;li&gt;支付宝，微信对于平台没有要求，并且前期已经投入大量人力物力财力养成了用户付费习惯， 才支付层面肯定是干不过这两家公司的。 倒是可以作为苹果进军中国支付， 银联进军互联网的一个契机&lt;/li&gt;
  &lt;li&gt;苹果目测不会对 Apple Pay 做符合中国人民用户习惯的改变， 看 AppStore 就知道了&lt;/li&gt;
  &lt;li&gt;Apple Pay 更想是一个卡包（实际上就是）， 而不像微信， 支付宝是一个钱包（可以转帐，汇款）&lt;/li&gt;
  &lt;li&gt;Android 机占比大约 66%， iphone 占比达约 32%&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;目前来看 &lt;code class=&quot;highlighter-rouge&quot;&gt;Apple Pay&lt;/code&gt; 只能用来装逼。 装逼过后剩下什么？啥都不会剩下。 今天就聊一聊 Android, 感觉 Android 的未来还是一片光明的：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Android 手机占据着中国主要的市场，陆续会出来 Android Pay 之类现在流行的东西&lt;/li&gt;
  &lt;li&gt;Android 使用的开发语言是 Java, 现在是世界上使用最多的语言。 Java 还可以做服务器之类的很多方面的事， 现在看来 OC 或者 Swift 都只能用来做 IOS 开发&lt;/li&gt;
  &lt;li&gt;现在 Google 退出了更加先进的 &lt;code class=&quot;highlighter-rouge&quot;&gt;gradle + Android Studio&lt;/code&gt; 开发工具可以使开发更加的得心应手&lt;/li&gt;
  &lt;li&gt;ios 开发出一个 APP 除了越狱， 一般只能上 App Store。 App Store 在国内访问速度之慢也是难以忍受的。 加上苹果漫长的审核周期和近乎严格的上架规则也是无形之中形成了一道阻碍。&lt;/li&gt;
  &lt;li&gt;ios 开发需要一台 Mac ＋ 开发者证书 + iphone， 这是一笔不小的开支，无形之中形成了不小的阻碍。 Android 就更加平民。&lt;/li&gt;
  &lt;li&gt;ios 有 App Store， Android 也有 Google Play&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;目前来看很多人选择做 ios开发 是看中其高薪， 但是长远来看并不见得。虽然说技术这种东西是一通百通，但是就目前来看越早把握越好。 不要像 08 年的房价， 现在（以后）想买（转行）已经来不及了。 坚持该坚持的，总有一天会看到广明。&lt;/p&gt;

&lt;h3 id=&quot;android-tips&quot;&gt;Android Tips&lt;/h3&gt;
&lt;p&gt;多余这段时间工作上的事情做下总结：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;把原来 Eclipse 的工程转换成 Android Studio 确实开发快速不少, 装上 ideaVim 这个插件之后可以基本抛弃鼠标。 各种快捷键的支持也是加快了开发的速度&lt;/li&gt;
  &lt;li&gt;多渠道打包 －&amp;gt; 不用像 Eclipse 每个渠道一个工程， 现在基本上所有渠道在一个工程里面就可以批量出包。&lt;/li&gt;
  &lt;li&gt;gradle 定制化输出， 出包时可以喝喝茶， 基本上可以达到完全的自动化&lt;/li&gt;
  &lt;li&gt;Eclipse 到 Android Studio 的转化只需要少量的修改就能完美运行&lt;/li&gt;
  &lt;li&gt;Android 中对 dex文件中方法用 16 为整数标记， 单个 dex 文件无法超过 65535. &lt;code class=&quot;highlighter-rouge&quot;&gt;gradle + Android Studio&lt;/code&gt; 将不会遇到这种问题&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;各种 SDK 的评价：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://bugtags.com/&quot; title=&quot;Bugtags&quot;&gt;BugTags&lt;/a&gt; 完全改变了原来老的测试模式。 崩溃时操作步骤的，日志，崩溃栈的收集可以不用怎么担心怎么复现这个 Bug， 更快的解决问题。 还能导出历史bug纪录为 xlsx 。接入的成本很小&lt;/li&gt;
  &lt;li&gt;TalkingData：除了 &lt;code class=&quot;highlighter-rouge&quot;&gt;友盟&lt;/code&gt; 之外另外的统计渠道数据的 SDK， 后台功能做的很完善。 可以方便的查看各种数据来做定向的投放。接入成本很小&lt;/li&gt;
  &lt;li&gt;个推：推送使用 Google 的 GCM 解决方案本来是最好的选择， 由于国内的网络环境无法使用。 个推用下来感觉还不错， 就是会额外增加 App 的耗电量。 接入成本小&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;易接： 一个母包盒服务器调通一次从登陆到支付的流程就可以批量出包了。 看起来貌似是节省了时间， 其实感觉会有点问题：&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;走的流程会稍微绕一点&lt;/li&gt;
      &lt;li&gt;易接服务器如果挂掉， 所有渠道都会挂掉&lt;/li&gt;
      &lt;li&gt;出包时渠道的各种奇葩要求沟通成本会很大， 效率及其低下&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>WeChat</title>
   <link href="http://garretthh07.github.io//life/2016/01/23/weixin"/>
   <updated>2016-01-23T00:00:00+08:00</updated>
   <id>http://garretthh07.github.io//life/2016/01/23/weixin</id>
   <content type="html">
&lt;hr /&gt;

&lt;p&gt;我是从 &lt;code class=&quot;highlighter-rouge&quot;&gt;2012年&lt;/code&gt; 开始使用微信的, 当时身边还是很少有人使用或者知道它。现在微信的迅速火爆, 我认为是有原因的:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;简洁而不简单:
    &lt;ul&gt;
      &lt;li&gt;没有多余的东西， 但是想要的东西都有&lt;/li&gt;
      &lt;li&gt;没有把 &lt;code class=&quot;highlighter-rouge&quot;&gt;QQ&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;通讯录&lt;/code&gt; 好友直接关联过来增加好友数, 要加好友必须验证&lt;/li&gt;
      &lt;li&gt;只专注于当下做的事不容易分心&lt;/li&gt;
      &lt;li&gt;朋友圈一次最多只能发9张图片。很少有官方的广告，偶尔出现夜达到饥饿营销的目的&lt;/li&gt;
      &lt;li&gt;红包的出现比较符合中国传统，可以增加朋友间的交流&lt;/li&gt;
      &lt;li&gt;红包图片，很容易污染朋友圈，逢年过节偶尔开下倒是还好。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;隐私的保护
    &lt;ul&gt;
      &lt;li&gt;上传一张图片就可以选择只给谁看或不给谁看，不同于分组发送&lt;/li&gt;
      &lt;li&gt;可以设置观看特定的朋友圈 （屏蔽代购最有用）&lt;/li&gt;
      &lt;li&gt;拉黑别人但不会通知别人。最后出现了一帮傻逼来群发消息清理好友， 做着完全没必要的事&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;对原创的支持
    &lt;ul&gt;
      &lt;li&gt;公众号， 能做很多需要开发App才能做的事，降低开发成本&lt;/li&gt;
      &lt;li&gt;很容易产生很大的流量&lt;/li&gt;
      &lt;li&gt;对于原创的大力推荐和支持，使有能力的作者更加乐于生产有价值的内容&lt;/li&gt;
      &lt;li&gt;博客时代的 Rss 订阅来获取关注及时的信息，WeChat 使得获取信息更加便捷&lt;/li&gt;
      &lt;li&gt;应用号如果有的话，将会是对传统行业的一大革新&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;虽然有人说微信封闭，但是我认为正是他的这种封闭才能使它做的那么干净。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;题外话&lt;/h3&gt;

&lt;p&gt;下面的这篇文章讲述  &lt;code class=&quot;highlighter-rouge&quot;&gt;微信&lt;/code&gt; Android客户端是怎样慢慢演变成一个大体量的公司：
&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzA3ODg4MDk0Ng==&amp;amp;mid=401921778&amp;amp;idx=1&amp;amp;sn=f05433ff53199999f9dc2acb3b249ac3&amp;amp;scene=0#wechat_redirect&quot; title=&quot;微信&quot;&gt;微信Android客户端架构演进之路&lt;/a&gt;&lt;br /&gt;
如果感觉这篇文章对于你有帮助， 对于原作者的关注和原文的转发将会是对作者最有力的支持。&lt;/p&gt;

&lt;p&gt;可以看到 &lt;code class=&quot;highlighter-rouge&quot;&gt;微信&lt;/code&gt; 也不是一开始就做到完美的， 也是一步一步慢慢的演化成现在的大体量公司。 不明真相的只会看到其现在的光辉，其实从这么一家 “创业” 公司可以学到很多： &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;解决当下出现的问题，提前预测没有出现的问题时很难办到的&lt;/li&gt;
  &lt;li&gt;需要提升作为技术的软硬实力来应对随时会遇到的问题&lt;/li&gt;
  &lt;li&gt;产品应该需要是多思考，多总结的，盲目的跟风和不着边际只会死更快&lt;/li&gt;
  &lt;li&gt;写代码时需要灵感的， 一个问题回过头来或者有时候灵光一闪才能解决的。相信好的产品设计也不例外，最后随身带个本子遇到好的想法就记下来， 不过现在这么浮躁的互联网环境能做到这点的估计是粉毛菱角。&lt;/li&gt;
  &lt;li&gt;技术对需求的不停改变应该有一定的容忍度， 市场在变， 策略也在变。 抱怨是没有用的&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Snakebird</title>
   <link href="http://garretthh07.github.io//games/2016/01/10/Snakebird"/>
   <updated>2016-01-10T00:00:00+08:00</updated>
   <id>http://garretthh07.github.io//games/2016/01/10/Snakebird</id>
   <content type="html">
&lt;hr /&gt;

&lt;h3 id=&quot;snakebird&quot;&gt;Snakebird&lt;/h3&gt;

&lt;p&gt;这是这个游戏的下载地址, 请看到的不要传播, 喜欢这个游戏可以去 &lt;code class=&quot;highlighter-rouge&quot;&gt;Steam&lt;/code&gt; 主页上购买:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Steam 上的链接:  &lt;a href=&quot;http://store.steampowered.com/search/?snr=1_4_4__12&amp;amp;term=Snakebird&quot;&gt;Snakebird&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;试玩的话可以去这个链接下载: &lt;a href=&quot;http://7xpgi9.com1.z0.glb.clouddn.com/Snakebird.rar&quot; title=&quot;Snakebird&quot;&gt;Snakebird&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;由于胡乱下载传播, 本人不负任何责任。&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;这个游戏总体来说设计的还算比较新颖，玩了差不多一天感觉还是蛮有意思的，很多时候想要达到目的只能是刚刚好的那种操作。可以看出来作者花费了很多功夫来制作这个游戏。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;http://7xpgi9.com1.z0.glb.clouddn.com/snakebird_origin_meitu_1.jpg&quot; alt=&quot;Snakebird&quot; title=&quot;Snakebird&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;技术分析&lt;/h3&gt;
&lt;p&gt;制作这个游戏的主要难点在于关卡的设计上，技术难度应该是不大的:
- 2D游戏引擎
- 一些会吸引你注意力的动画
- 关卡用地图编辑器
- 组件之间使用物理引擎，刚体的不可相交，设置下重力使 &lt;code class=&quot;highlighter-rouge&quot;&gt;Snakebird&lt;/code&gt; 超过支撑点之后往下掉出边界游戏失败和到达终点游戏胜利。&lt;/p&gt;

&lt;p&gt;感觉怎么样都是能做的。关卡应该是有个大概有个想做的样子，写程序遍历出来的， 最后做下精心的挑选。要是真的是人脑想出来的只能对这个人说佩服佩服了。&lt;/p&gt;

&lt;p&gt;游戏相信是使用差不多的手段做出来了，可能我的做法比较 &lt;code class=&quot;highlighter-rouge&quot;&gt;Low&lt;/code&gt;， 但是大体应该是不会有差的。&lt;/p&gt;

&lt;h4 id=&quot;section-1&quot;&gt;为什么不再玩&lt;/h4&gt;
&lt;p&gt;一开始感觉还是感觉挺有意思的， 想都不想上来就是一步一步试错的点， 玩到打星的关卡突然就行不通了， 发现如下问题:
- 游戏没有提示，一开始就发现梯子能动，但是真的发现要使用梯子才能过去，是在把 &lt;code class=&quot;highlighter-rouge&quot;&gt;3&lt;/code&gt;条蛇都连接起来还是够不到的时候，这就耗费我差不多10多分钟的时间&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;由于蛇的长短不一，游戏经过作者的精心设计差不多只能有一种方式才能过去，如果不想清楚的话回一直在做 &lt;code class=&quot;highlighter-rouge&quot;&gt;Undo操作&lt;/code&gt;(回退)，有点想深度优先搜索， 会消耗你大量时间，陷在里面的话只能一直绕了， 没有出来的可能&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;最后所有失败的猜想都尝试过了， 剩下你感觉是正确的完成游戏的样子，你要达到那个样子也是很花时间的。 因为每步操作都是要刚刚好才能过去，一步小心弄错了都要重来。&lt;code class=&quot;highlighter-rouge&quot;&gt;Undo操作&lt;/code&gt; 会为你节省点时间，但是有些是节省不了的，要重来还是要重来的。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;越难的关卡到后面可能之后分短的组合， 如过要完成整个关卡要5步，你要先思考完成第一步，然后第二部， 一直到最后一步。 其中任何出现差错或没有想清楚都要重来 &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;游戏里面的海星，彩虹会吸引你的注意力。因为前面有有能吃掉果实，蛇变长的例子，点击那些中立物有反应，自然回想能不能吃，然而并不能。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-2&quot;&gt;总结&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;这个游戏是一个好游戏，很有创新， 作者花费了大量的时间来制作， 很用心。测量不了长度还能在屏幕上打开网格，可以说一目了然。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;我不玩的原因就是花点时间都是能通关的， 想的仔细点就能通关，花的时间也少点。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;作者的设计应该是正确操作下不会超过20组能解出来，再多的话就太耗时间了， 虽然现在也很耗，无聊打发时间还可以。 &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;可能后面对难度有新的定义， 我感觉差不多就一下情况:&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;加梯子之类的可移动中立物来增加变量来提升难度&lt;/li&gt;
      &lt;li&gt;加果实之类的来提升蛇的长度来提升难度， 果实多了要选择给哪条蛇吃要选下，如果只是一种情况可行的话，就要一直 &lt;code class=&quot;highlighter-rouge&quot;&gt;Undo&lt;/code&gt; 到一个你认为正确的节点&lt;/li&gt;
      &lt;li&gt;增加蛇的数量， 蛇的长度不一， 上下叠加的顺序也要考虑&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;其他增加游戏难度的变量要多少想下都是有的吧。如果谁通关了不是太有毅力就是深谋远虑，一次想清楚通过才是正确的玩法， 没想清楚瞎玩都是浪费时间。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;tips&quot;&gt;Tips&lt;/h3&gt;
&lt;p&gt;想要学英语的朋友推荐下面这个网站: &lt;a href=&quot;http://www.lavafox.com/&quot; title=&quot;Lavafox&quot;&gt;Lavafox&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;简单介绍下:
- 首先学英语如果只知道背单词英语肯定是学不好的&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;马上拿本英文书来看，看一会就要睡着了&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;这个网站先看视屏里面的单词，然后看美剧视屏,  最后复习。感觉还是比较有意思的，起码两个小时看下来和玩游戏一样很投入。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;绝对不是做广告，也没有拿广告费。 想学的可以去注册免费体验一把。只能说谁用谁知道， 年费 &lt;code class=&quot;highlighter-rouge&quot;&gt;169元&lt;/code&gt; 也不是很贵， 我试用两小时马上就买了， 穷人只能买买这些东西了。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Texmacs</title>
   <link href="http://garretthh07.github.io//tools/2015/12/27/texmacs"/>
   <updated>2015-12-27T00:00:00+08:00</updated>
   <id>http://garretthh07.github.io//tools/2015/12/27/texmacs</id>
   <content type="html">
&lt;blockquote&gt;
  &lt;p&gt;使用了 TexMacs 才发现什么是人性化的设计，我本来写的数学公式也不是很多。花大量的时间去学习 LaTex 的各种命令很不划算，就算学会了太久不用马上就会全部忘记的。  TexMacs 的发明真的是我的福音，优点如下：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;安装简单&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;无需配置&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;无需记命令&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;嫌图形界面太发麻，可以使用快捷键，完美解决需求&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;官方网站：&lt;a href=&quot;http://www.texmacs.org/tmweb/home/welcome.en.html&quot; title=&quot;TexMacs官方网站&quot;&gt;http://www.texmacs.org/tmweb/home/welcome.en.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;入门简短教程：&lt;a href=&quot;http://www.texmacs.org/Samples/texmacs.pdf&quot; title=&quot;TexMacs官方教程&quot;&gt;http://www.texmacs.org/Samples/texmacs.pdf&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;少量的学习可以有专业的排版，入门的门槛也不高，花10分钟随便写了如下效果，数学公式是亮点，其他忽略：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;http://www.texmacs.org/tmweb/home/welcome.en.html&quot;&gt;&lt;img src=&quot;http://7xpgi9.com1.z0.glb.clouddn.com/texmacs3.png&quot; alt=&quot;TexMacs&quot; title=&quot;TexMacs随便写的一个示范&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;section&quot;&gt;总结&lt;/h4&gt;

&lt;p&gt;我最近一段时间是没有什么机会使用这个的，只是随便抽出半天玩了下。 效果还是不错的，后续看看博客上能不能集成 TexMacs 插件让一些化学公式，数学公式等表现的更加美观一点。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Dijkstra Lambda</title>
   <link href="http://garretthh07.github.io//lambda/2015/12/25/dijkstra-lambda"/>
   <updated>2015-12-25T00:00:00+08:00</updated>
   <id>http://garretthh07.github.io//lambda/2015/12/25/dijkstra-lambda</id>
   <content type="html">
&lt;blockquote&gt;
  &lt;p&gt;今天稍微看了下 &lt;code class=&quot;highlighter-rouge&quot;&gt;Java&lt;/code&gt; 中 &lt;code class=&quot;highlighter-rouge&quot;&gt;Lambda&lt;/code&gt; 的实现，&lt;code class=&quot;highlighter-rouge&quot;&gt;Lambda&lt;/code&gt; 是 &lt;code class=&quot;highlighter-rouge&quot;&gt;Java 8&lt;/code&gt; 中添加的新特性, 如果要我评价这个发明是不是伟大，答案一定是肯定的：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;lambda&quot;&gt;为什么需要 Lambda&lt;/h4&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Java 中增加 Lambda 说实话并没有增加什么新的功能。只是可以使用更少的代码，更优雅的实现相关的功能。俗话说的好：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;越少的代码实现相关功能，才能犯越少的错误。就算犯错了也能快速的定位，并修改掉。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;参考： &lt;a href=&quot;http://www.javaworld.com/article/2092260/java-se/java-programming-with-lambda-expressions.html&quot;&gt;Java programming with lambda expressions&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Java 不像 C++ 支持函数指针传递给另外的函数调用，也不像 Lua 函数本身就是一种基本类型。 想要实现类似于传递函数给另外的函数在内部调用，一般都是先实现一个只有一个方法的接口（&lt;strong&gt;计为 A&lt;/strong&gt;），调用方式如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;写一个类以 &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt; 作为接口，实现 &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt; 接口的方法， 以 &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt; 作为函数的参数，把 new 出来的该类传递过去。这样实现有几个弊端：
    &lt;ul&gt;
      &lt;li&gt;需要这个接口实现另外的功能就需要另外新建一个类继承这个接口，需求越多重复的工作就越多&lt;/li&gt;
      &lt;li&gt;接口只能有一个方法显得累赘&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;使用匿名函数可以不用每次有新功能就增加一个类，但是代码冗长一点都不优雅&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Lambda 用如下语法来扩展了接口，一句话就可以实现，把编码中心真的放在功能的实现上，结果也是一目了然。&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre&gt;&lt;code class=&quot;highlight&quot;&gt;  (double x) -&amp;gt; Math.sin(x)
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;java.util.function&lt;/strong&gt; 的引入可以不用新增接口就可以实现相关工作&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;section&quot;&gt;总结&lt;/h4&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/Lambda-QuickStart/index.html&quot;&gt;Java SE 8: Lambda Quick Start&lt;/a&gt; 里面有更佳详细的介绍，纪录一下：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Runnable, 按钮的点击回调这些需要实现一个 &lt;strong&gt;Listener&lt;/strong&gt; 接口方法的都可以使用 Lambda 来大大的简化， Lambda 表达式还可以嵌套使用，感觉还是可以比较清晰的实现相关功能的，而且可以写的比较优雅。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;life-tips&quot;&gt;Life Tips&lt;/h4&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://v.youku.com/v_show/id_XNjc1MDMzNDg4.html&quot;&gt;&lt;img src=&quot;http://7xpgi9.com1.z0.glb.clouddn.com/dijkstra.png&quot; alt=&quot;Dijkstra&quot; title=&quot;Dijkstra&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;现在很多人都喜欢把比自己厉害的人叫做大牛，感觉这是一种很不好的风气。我感觉应该分为另自己尊敬的人和和自己无关的人，这个划分完全按照个人而定，所以我也没有资格来评价别人啦。 Dijkstral 的采访视屏有很多获益匪浅的话在这里记录一下，诚然他是令我尊敬的人：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;As long as you can fool people into buging it, you can always try to make better versions later. Even with decimals, version 2.6 or 2.6.That nonsense, while version 1 should have been the finished product.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The universities lack the courage to teach hard science. The will continue to misguide the students and each stage in the infantilization of the curriculum will be hailed as educational progress&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;There are very different programming styles. I tend to see them as Mozart versus Beethoven. When Mozart started to write, the composition was finished. He wrote the manuscript in one go.In beautiful handwriting, too. Beethoven was a doubter and a struggler, who started writing before he finished the composition and then glued corrections onto the page. In one place he did this nine times, when they peeled them, the last version proved identical to the first one.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;People thought that those languages &lt;code class=&quot;highlighter-rouge&quot;&gt;(Fortran, Pascal, C++ and such like)&lt;/code&gt; would solve the programming problem. But when you look closely, the trivial aspects of programming had been automated, while the hard ones remained.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If in physics there’s something you don’t understand, you can always hide behind the uncharted depths of nature. You can always blame God. You didn’t make it so complex yourself. But if your program doesn’t work, there is no one to hide behind. You cannot hide behind an obstinate nature. A zero is a zero, a one is a one. If it doesn’t work, you’ve messed up.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;I knew that each Apollo flight required some 40,000 new lines of code. I don’t know what unit a line of code is, but 40,000 is a lot. I was duly impressed that they got so many lines of code correct:
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;He said that in one of the calculations of the orbit of the lunar module, the moon had been defined as repelling instead of attracting.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;They  had discovered that error by accident, five days before the shot.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Program testing can convincingly show the presence of bugs, but is is hopelessly inadequate to show their absence.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Elegance is not a dispensable luxury, but a factor that decides between success and failure. &lt;strong&gt;Elegent&lt;/strong&gt; may be meant as &lt;strong&gt;ingeniously simple and effective&lt;/strong&gt; -&amp;gt; the most elegant programs are often the most efficient.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Make sure you know all the formulae by heart, and if you need more than five lines, you’re on the wrong track.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Elegance has the disadvantage, if that’s what it is, that hard work is needed to achieve it and a good education to appeaciate it.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;记录那么多像是再做毫无益处的苦力，我可以安慰自己这又学习了英语又加深了理解，其实所有的都是假象，当我发现自己花了一个小时做了一件蠢事的时候，已经做完了， 剩下的自由懊悔不已。 温习还得点击图片看视屏。&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>A Little Java A Few Patterns</title>
   <link href="http://garretthh07.github.io//books/2015/12/16/A-Little-Java-A-Few-Patterns"/>
   <updated>2015-12-16T00:00:00+08:00</updated>
   <id>http://garretthh07.github.io//books/2015/12/16/A-Little-Java-A-Few-Patterns</id>
   <content type="html">
&lt;hr /&gt;

&lt;h3 id=&quot;a-little-java-a-few-patterns&quot;&gt;A Little Java A Few Patterns&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://7xpgi9.com1.z0.glb.clouddn.com/alittlejava.png&quot; alt=&quot;A Little Java&quot; title=&quot;A Little Java&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;花了5天看完 《A Little Java A Few Patterns》。短短 &lt;code class=&quot;highlighter-rouge&quot;&gt;182&lt;/code&gt; 页,  看完更加了解 Class, Interface, Object 和 Extend 这些概念。
对话方式引导学习很有意思, 看的过程中完全没有想睡觉的感觉 (&lt;strong&gt;主要是比较短&lt;/strong&gt;) &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section&quot;&gt;感悟&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;面向对象优雅的以更短的代码实现更强大的功能&lt;/li&gt;
  &lt;li&gt;Java 不支持多继承, 使用 接口(Interface) 来扩展程序, 接口的继承和类的继承，加上多态的特性可以不改变原来一行代码来添加新功能&lt;/li&gt;
  &lt;li&gt;使用 Java 来实现一个编译器完全不是没有可能，效率可能会低点&lt;/li&gt;
  &lt;li&gt;程序封装越好, 实现越简洁，维护起来比较方便。&lt;/li&gt;
  &lt;li&gt;先有后优：考虑没有的功能完全没有必要，遇到了再实现实现会更好，也不要过早优化&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;tips&quot;&gt;Tips&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;稍微看了下  &lt;a href=&quot;https://portal.qiniu.com/signin?goto=%2Fsetting%2Fcertification&quot;&gt;七牛云存储&lt;/a&gt; 将其作为了图床，对于图片格式的支持和尺寸的控制做的很全面，寻找图床原因有二：
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Mou&lt;/strong&gt; 上写 &lt;strong&gt;Makedown&lt;/strong&gt; 文本引用外部图和 Github 上的相对路径不一致，索性使用外链能达到统一&lt;/li&gt;
      &lt;li&gt;图片使用 &lt;strong&gt;七牛&lt;/strong&gt; 统一管理起来比较方便&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;TeXMacs&lt;/strong&gt; 真的是所见即所得的编辑文本的法宝，用空研究下，留个坑&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>The Martian</title>
   <link href="http://garretthh07.github.io//books/2015/12/09/the-martian"/>
   <updated>2015-12-09T00:00:00+08:00</updated>
   <id>http://garretthh07.github.io//books/2015/12/09/the-martian</id>
   <content type="html">
&lt;h3 id=&quot;the-martian-a-novel&quot;&gt;The Martian: A Novel&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;《火星救援》的电影拍摄的蛮不错的，整个故事可以顺利串联起来，没有一大堆的高深科学理论。&lt;strong&gt;Kindle&lt;/strong&gt; 上有原版小说，不知道是谁说的－看书就要看原版才有味道。全英文的小说看起来有点吃力，就当作学习英语的读物了。 &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;http://www.amazon.cn/The-Martian-A-Novel-Weir-Andy/dp/B00EMXBDMA/ref=sr_1_2?ie=UTF8&amp;amp;qid=1450883147&amp;amp;sr=8-2&amp;amp;keywords=%E7%81%AB%E6%98%9F%E6%95%91%E6%8F%B4&quot;&gt;&lt;img src=&quot;http://7xpgi9.com1.z0.glb.clouddn.com/The%20Martian.png&quot; alt=&quot;The Martian&quot; title=&quot;火星救援&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;电影最后主人公说的话让人印象深刻， 大致意思说的是：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;在火星上事事都不会如你所愿，总会有各种问题出现，遇到一个问题，解决它，当你解决的问题足够的多时，你就可以活下来回到地球，否则就会死。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;sol&quot;&gt;火星上生存 SOL&lt;/h4&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;一场巨大的火星风暴袭击了他们的探测地点，在准备撤退的过程中，主人公被大风吹来的物品集中飞了出去，飞船检测到他的航空服破裂。在失压的情况下，人是活不过1分钟的。全员都以为他已经死了， 撤离了火星。 由于天线杆刺穿了他的身体阻止了失压，主人公活了下来， 但是被一个人留在了火星：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;4年后地球将对火星再次探测, 已经在距离现在位置3200公里位置放置了航空器&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;电：太阳能电路板＋蓄电池可以充分保证电量&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;食物：最坏情况下的需要规划4年的食物，需要种植手头的土豆种子：&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;温度: 火星昼夜温差巨大，只能中在太空舱里面&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;土壤: 火星土壤不适合种植, 微生物满满的作用可以使其合适种植, 排泄物废物利用给土壤提供营养&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;空间: 考虑食物的生长周期和需要的卡路里量, 把太空舱中没用的东西搬出去，腾出尽量大的空间&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;氧气：火星大气95%是二氧化碳, 二氧化碳通过 Oxygenator 能分解出氧气, 飞船在一开始设计的时候应该就考虑来了&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;水：生命和种植食物都需要水. 氢气 和 氧气燃烧生成水, 容器保存水&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;氢气: 火箭材料N2H4(hydrazine)加热能分解成氮气和氢气. 液态的特性较易控制, 有毒&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;围绕食物和水的自救是第一步的工作，和 &lt;code class=&quot;highlighter-rouge&quot;&gt;NASA&lt;/code&gt; 通信时第二步， 其中的每个细节都是空难重重. 最后主人公靠自己顽强的毅力，过人的胆识都一一化解. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;辗转找到很久之前失联的火星探测器，&lt;code class=&quot;highlighter-rouge&quot;&gt;NASA&lt;/code&gt; 可以使用摄像头的转动来传递简单的信息。由于英文有26个字母在360度里面排列的间隙太窄无法准确表达意思。 主人公使用了 &lt;strong&gt;16进制&lt;/strong&gt; 配合 &lt;strong&gt;ASCII表&lt;/strong&gt; 可以更加简单的表达。 为啥不使用 &lt;strong&gt;2进制&lt;/strong&gt;：
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;2进制&lt;/strong&gt; 虽然只有两个字符但是转化的字符长度会更长，&lt;strong&gt;16进制&lt;/strong&gt; 在两个字符内基本可以表示一个英文单词&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;主人公不是计算机专业，只是借别人的 &lt;strong&gt;16进制&lt;/strong&gt; 表来达到自己的目的，没有考虑太多 &lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;摄像头的转动消耗的时间对于编码长度的优化其实是没啥用的，个人感觉 &lt;strong&gt;2进制&lt;/strong&gt; 会好点	&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;每个 airlock 的耐久度其实不长（差不多一个月），由于和充电装比较近，偷懒导致最后爆炸，这个肯定是他自己的锅 &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;为了测试到达 3200 公里开外的 Area 4。 需要考虑火星探测车的电量（空调会消耗一半电量很不划算，最后用 &lt;code class=&quot;highlighter-rouge&quot;&gt;环&lt;/code&gt; － 放射性物质代替了），自己需要使用的食物，水，空气和热量等因素&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;一开始测试能够到达 Area 4, 需要离开很长时间， 种植的土豆没人看管，需要考虑 O2, CO2，湿度，温度等来保证在离开时间内不会死掉&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NASA&lt;/code&gt; 有两种方案可以保证主人公活下来，都需要借助地球的 &lt;strong&gt;太阳神&lt;/strong&gt; 助推器（由于一开始的赶工，第一版自己的助推器爆炸，已经没有时间再做一个了）：&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;太阳神&lt;/strong&gt; 携带生命所有的食物等降落在主人公傍边，等待下一次的救援。 但是这方案缺点是变数很多， 优点是不用剩下的5位低概率的冒生命危险（下条会说），主人公会高概率死亡&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;航空站接受 &lt;strong&gt;太阳神&lt;/strong&gt; 的物质资助， 不是使用本来长达一个月的减速方案， 马上加速利用地球的引力加速度飞回火星为原来的探测任务又增加 SOL 561  &lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;最后 &lt;code class=&quot;highlighter-rouge&quot;&gt;NASA&lt;/code&gt; 瞒着他们选择了方案一。 不知道是谁把方案发给全员，他们最后选择了方案二。 虽然说是自愿选择的， 但是感觉有点道德绑架， 一个带头的说救了， 方案都到手了， 大家肯定会说救。 &lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;很多因素都会导致主人公的死亡， 最后能活着回到地球，只能说这是小说 － 都是导演的安排&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;section&quot;&gt;总结&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;解决眼前短期的目标, 不要做太过长远的规划 &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;没有什么事情是解决不了的, 很多时候只是需要换一种思路&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;困难是不可预知的，每次认真检查各种情况，遇到问题及时修复&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;最后教学的时候听起来貌似没有什么，但是真的经历了才知道这件事是有多么困难的&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;前人的经验和总结可以帮助我们少犯错误， 站在巨人的肩膀上才可以走的更远。 当走的足够远时，往往会忘记有巨人的帮助&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>翻墙</title>
   <link href="http://garretthh07.github.io//life/2015/12/08/out-of-then-wall"/>
   <updated>2015-12-08T00:00:00+08:00</updated>
   <id>http://garretthh07.github.io//life/2015/12/08/out-of-then-wall</id>
   <content type="html">
&lt;h3 id=&quot;section&quot;&gt;科学上网&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;section-1&quot;&gt;土行孙&lt;/h4&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://itxs.li/login&quot;&gt;土行孙&lt;/a&gt; 配置十分方便 &lt;code class=&quot;highlighter-rouge&quot;&gt;Window&lt;/code&gt;下把一个链接在 &lt;code class=&quot;highlighter-rouge&quot;&gt;IE浏览器&lt;/code&gt; 下面粘贴一些就可以上网了。但是这个方便的地方也带来了很多的不方便：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;昨天看一个视屏（需要翻墙）默默的走来1G的流量，直接提示流量不足了。&lt;/li&gt;
  &lt;li&gt;不能自由的控制能否翻墙，默认全部可以翻墙。&lt;/li&gt;
  &lt;li&gt;注册&lt;code class=&quot;highlighter-rouge&quot;&gt;Google账户&lt;/code&gt;总是会提示手机号码无法验证，不知道是不是他的锅。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当然也有很多便利的地方：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;支持包月和购买流量，想我这种屌丝每次买个 &lt;strong&gt;30元／3G&lt;/strong&gt; 就足够我用好几个月了。&lt;/li&gt;
  &lt;li&gt;每个账户都有一个后台可以查看最近几天的流量消耗。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;智能分流&lt;/code&gt;在我看来做的还是停精确的，不会乱跑你的流量。&lt;/li&gt;
  &lt;li&gt;邀请码每成功一个用户就送 &lt;strong&gt;500M&lt;/strong&gt; 流量也是不错的。&lt;/li&gt;
  &lt;li&gt;同时支持最多6台设备&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;shadowsocks&quot;&gt;ShadowSocks&lt;/h4&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://shadowsocks.com/&quot;&gt;ShadowSocks&lt;/a&gt; 在 Mac 下直接下载一个客户端就好了，从一个 IP 列表里面选择一个IP，配置一下给的端口号和密码就可以了，&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;优点：99RMB一年不限制流量，配置方便，任意开关，价格便宜。&lt;/li&gt;
  &lt;li&gt;缺点：不支持多台设备。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;tips&quot;&gt;Tips&lt;/h3&gt;

&lt;p&gt;今天总结了几个比较受益的博客和经验:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;今天看 &lt;a href=&quot;http://www.yinwang.org/blog-cn/2015/11/21/programming-philosophy/&quot;&gt;王垠&lt;/a&gt; 关于编程的建议, 收获挺大.&lt;/li&gt;
  &lt;li&gt;一个人编写代码时, 也要使用版本控制工具, Git 和其他比起来就不错, 转命令行可以使用更加完整功能, 目前功能足够了的话 SourceTree 就不错。 &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Google 访问推广代码, 随便搞了下, 感觉没啥用, 记录一下。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre&gt;&lt;code class=&quot;highlight&quot;&gt;Google Analytics Code
&amp;lt;script&amp;gt;
  (function(i,s,o,g,r,a,m){i[&#39;GoogleAnalyticsObject&#39;]=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,&#39;script&#39;,&#39;//www.google-analytics.com/analytics.js&#39;,&#39;ga&#39;);

  ga(&#39;create&#39;, &#39;UA-71029533-1&#39;, &#39;auto&#39;);
  ga(&#39;send&#39;, &#39;pageview&#39;);

&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;script&gt;
  (function(i,s,o,g,r,a,m){i[&#39;GoogleAnalyticsObject&#39;]=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,&#39;script&#39;,&#39;//www.google-analytics.com/analytics.js&#39;,&#39;ga&#39;);

  ga(&#39;create&#39;, &#39;UA-71029533-1&#39;, &#39;auto&#39;);
  ga(&#39;send&#39;, &#39;pageview&#39;);

&lt;/script&gt;

</content>
 </entry>
 
 
</feed>
